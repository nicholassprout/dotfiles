#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import getopt
#import gdata.docs.data
#import gdata.docs.client
#import gdata.acl.data
#import gdata.spreadsheet.service
import os
import subprocess
import getpass
#import csv


##  
##  The following options are provided.
##  --help. What you are reading now
##  --clone. 
##  --pull. 
##  --push. 
##  --merge. 

def GetBookmarkFromRepo(repo):
	return "b"+repo;

def GetRepoFromBookmark(bookmark):
	if bookmark[0] != "b":
		print "not a valid bookmark"
		sys.exit(1)
	repo = bookmark[1:]	
	return repo

def InstallLocalHooks(path):
	print "/usr/lib/tuenti_tools/mercurial/localhooks/install.sh --porky"
	pipe = subprocess.Popen(["/usr/lib/tuenti_tools/mercurial/localhooks/install.sh", "--porky"], stdout=subprocess.PIPE)
	results = pipe.stdout.readlines()
	for line in results:
		print line

def BookmarkRepoRevision(rev, repo):
	bookmarkName = GetBookmarkFromRepo(repo)
	print "hg bookmark -f -r "+rev+" "+bookmarkName
	pipe = subprocess.Popen(["hg", "bookmark", "-f", "-r", rev, bookmarkName], stdout=subprocess.PIPE)
	results = pipe.stdout.readlines()
	for line in results:
		print line
	
def GetCurrentBookmark():
	currentBookmark = 'Null'
	print "hg bookmarks"
	pipe = subprocess.Popen(["hg", "bookmarks"], stdout=subprocess.PIPE)
	bookmarks = pipe.stdout.readlines()
	for line in bookmarks:
		if line.lstrip()[0] == "*":
			fields = line.split(" ")
			currentBookmark = fields[2]
	return currentBookmark

def GetRemoteRepoID(remoteRepo):
	#TODO: make sure we only check the default branch
	print "hg identify "+remoteRepo
	pipe = subprocess.Popen(["hg", "identify", remoteRepo], stdout=subprocess.PIPE)
	id = pipe.stdout.readline()
	if id == "":
		print "Invalid ID bailing...";
		sys.exit(1)
	retId = id.rstrip()
	print retId
	return id.rstrip()
		

def FindBranch():
	print 'finding branch\n'
	return;

def PullRepoFromLocation(repoLocation):
	print "hg pull "+ repoLocation+ " -u"
	pipe = subprocess.Popen(["hg", "pull", repoLocation, "-u"], stdout=subprocess.PIPE)
	output = pipe.stdout.readlines()
	for line in output:
		print line

def CloneStable(path):
	print "hg clone stable "+path], stdout=subprocess.PIPE)
	pipe = subprocess.Popen(["hg", "clone", "stable", path], stdout=subprocess.PIPE)
	cloneOutput = pipe.stdout.readlines()
	for line in cloneOutput:
		print line
		
def GeneratePorkyHgrc(path):
	f = open(path+'/.hg/hgrc', 'w')
	f.seek(0);
	f.write("# Autogenerated Porky Repo HGRC File\n[bookmarks]\ntrack.current = True\n");
	f.close();
	InstallLocalHooks(path)
	

def PorkyClone():
	print "porky cloning"
	username = getpass.getuser()
	path = '/home/'+username+'/branches/porky'
	if os.path.exists(path):
		print "There's already a pory repo here: "+path+" bailing...";
		sys.exit(1)
	CloneStable(path)
	savedPath = os.getcwd()
	os.chdir(path)
	GeneratePorkyHgrc(path)
	BookmarkRepoRevision('tip', 'stable')
	os.chdir(savedPath)

def PorkyPull(repo):
	print "porky pulling"
	if repo == "":
		currentBookmark = GetCurrentBookmark()
		if currentBookmark == 'Null':
			print "No current bookmark bailing...";
			sys.exit(1)
		else:
			print "Found current bookmark: "+currentBookmark
		markedRepo = GetRepoFromBookmark(currentBookmark)
		PullRepoFromLocation(markedRepo)
		print "Bookmarked repo: "+markedRepo
		remoteID = GetRemoteRepoID(markedRepo)
		print "Remote repo identified: "+remoteID
		BookmarkRepoRevision(remoteID, markedRepo)
	else:
		remoteID = GetRemoteRepoID(repo)
		PullRepoFromLocation(repo)
		print "Remote repo identified: "+remoteID
		BookmarkRepoRevision(remoteID, repo)
		
	

def usage():
	fh = open(__file__,"r")
	me = fh.readlines()
	for line in me:
		if line.find("##") == 0:
			print line,
			

#class Usage(Exception):
#	usage()
 
def main(argv = None):
	action = "";
	repoLocation = "";
	actionList = ["clone", "pull", "push", "merge"]
	try:
		opts, args = getopt.getopt(sys.argv[1:], "ha:l:", ["help", "action=", "location="])
	except getopt.GetoptError, err:
		# print help information and exit:
		print "error:"
		print str(err) # will print something like "option -a not recognized"
		usage()
		return 1
	for o, a in opts:
		if o in ("-h", "--help"):
			print "help:"
			usage()
			sys.exit()
		elif o in ("-a", "--action"):
			action = a
		elif o in ("-l", "--location"):
			repoLocation = a
		else:
			usage()
	if action == "":
			usage()
			return 1
	elif action == "clone":
			PorkyClone()
	elif action == "pull":
			PorkyPull(repoLocation)
	elif action == "push":
			print "implement "+action
	elif action == "merge":
			print "implement "+action
		
	print "\nPLEASE IMPLENT CORE LOGIC HERE!\n"
	print "Done!"
	return 0




if __name__ == "__main__":
  sys.exit(main())
